type GameDeployed @entity {
  id: ID!
  gameAddress: Bytes!
  admin: Bytes!
  timeLimit: BigInt!
  scorePoint: BigInt!
}

type Game @entity {
  id: ID!
  admin: Bytes!
  timeLimit: BigInt!
  scorePoint: BigInt!
  isGameStarted: Boolean!
  currentTeam: Int!
  currentRound: Int!
  teams: [Team!] @derivedFrom(field: "game")
  cards: [Card!] @derivedFrom(field: "game")
}

type Team @entity {
  id: ID!
  game: Game!
  name: String!
  members: [Bytes!]!
  score: BigInt!
  players: [Player!] @derivedFrom(field: "team")
}

type Card @entity {
  id: ID!
  game: Game!
  encryptedWord: String!
  word: String
  isUsed: Boolean!
  team: Team!
  player: Bytes!
}

type Player @entity {
  id: ID!
  team: Team!
  address: Bytes!
}

type RoundStarted @entity {
  id: ID!
  round: Int!
  team: Team!
}

type WordChecked @entity {
  id: ID!
  team: Team!
  player: Bytes!
  encryptedWord: String!
}

type ScoreUpdated @entity {
  id: ID!
  team: Team!
  score: BigInt!
  word: String!
}

type PlayerJoinedTeam @entity {
  id: ID!
  team: Team!
  player: Bytes!
}

type GameStarted @entity {
  id: ID!
}

type CardAdded @entity {
  id: ID!
}

# governance
type Governor @entity {
  id: ID!
  name: String!
  version: String!
  proposals: [Proposal!] @derivedFrom(field: "governor")
}

type Proposal @entity {
  id: ID!
  governor: Governor!
  proposer: Bytes!
  targets: [String!]
  values: [BigInt!]
  signatures: [String!]
  calldatas: [Bytes!]
  startBlock: BigInt!
  endBlock: BigInt!
  description: String!
  state: String!
  votes: [Vote!] @derivedFrom(field: "proposal")
}

type Vote @entity {
  id: ID!
  proposal: Proposal!
  voter: Bytes!
  support: Boolean!
  votes: BigInt!
  reason: String
}

type Token @entity {
  id: ID! # Unique identifier, typically the contract address
  name: String! # Name of the token
  symbol: String! # Symbol of the token
  totalSupply: BigInt! # Total supply of the token
  holders: [Account!] @derivedFrom(field: "token")
}

type Account @entity {
  id: ID! # Unique identifier, typically the address of the account
  token: Token! # Relationship to the Token entity
  balance: BigInt! # Balance of the account
  transfers: [Transfer!] @derivedFrom(field: "from")
}

type Transfer @entity {
  id: ID! # Unique identifier, typically the transaction hash
  from: Account! # Address of the sender
  to: Account! # Address of the receiver
  value: BigInt! # Amount of tokens transferred
  blockNumber: BigInt! # Block number when the transfer occurred
  timestamp: BigInt! # Timestamp when the transfer occurred
}

type Approval @entity {
  id: ID!
  owner: Bytes!
  spender: Bytes!
  value: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type Timelock @entity {
  id: ID!
  admin: Bytes!
  pendingAdmin: Bytes
  delay: BigInt!
  queuedTransactions: [QueuedTransaction!] @derivedFrom(field: "timelock")
}

type QueuedTransaction @entity {
  id: ID!
  timelock: Timelock!
  target: String!
  value: BigInt!
  signature: String!
  calldata: Bytes!
  eta: BigInt!
  executed: Boolean!
  canceled: Boolean!
}
